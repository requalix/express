// Generated by CoffeeScript 1.6.2
(function() {
  $(function() {
    var DIFFICULTY, DIST_FOR_COLLISION, INF, INTENDED_JUMPS, JUMP_DISTANCE, PLAYER_RADIUS, PLAYER_X_IN_VIEWPORT, SPEEDS, STUFF_WIDTH, TICK_DISTANCE, TICK_HEIGHT, VIEWPORT_HEIGHT, VIEWPORT_WIDTH, badStuffCollision, difficulty, doJump, doPersonalBest, drawPlayer, drawStuff, drawXAxis, fadeOutVolume, getDifficultyAt, getElapsedDistance, getJumpY, getPlayerX, getPlayerY, getTime, getViewportX, goodStuffCollision, i, incrementScore, isJumping, jump, mapTimeToX, mapXToTime, nextSineDirection, nextSineStart, personalBest, playing, pr, refreshScore, resetScore, score, sineDirection, sineStart, square, start, stuff, stuffIndex, t, togglePlaying, _fn, _i, _j, _len;

    sglInit();
    INF = 1 / 0;
    PLAYER_RADIUS = 0.25;
    TICK_HEIGHT = 0.1;
    TICK_DISTANCE = 1;
    STUFF_WIDTH = 0.2;
    VIEWPORT_WIDTH = 8;
    PLAYER_X_IN_VIEWPORT = VIEWPORT_WIDTH / 3;
    VIEWPORT_HEIGHT = 4;
    JUMP_DISTANCE = 4 * TICK_DISTANCE;
    DIST_FOR_COLLISION = 0.2;
    SPEEDS = [
      {
        time: 0,
        speed: 20 / 60
      }, {
        time: 4,
        speed: 2 * 86 / 60
      }, {
        time: 20.2,
        speed: 2 * 86 / 60
      }, {
        time: 20.8,
        speed: 40 / 60
      }, {
        time: 21.8,
        speed: 40 / 60
      }, {
        time: 22.3,
        speed: 3 * 86 / 60
      }, {
        time: 86.4,
        speed: 3 * 86 / 60
      }, {
        time: 86.7,
        speed: 40 / 60
      }, {
        time: 89.1,
        speed: 40 / 60
      }, {
        time: 89.3,
        speed: 4 * 86 / 60
      }, {
        time: 111.59,
        speed: 5 * 86 / 60
      }, {
        time: 177,
        speed: 4 * 86 / 60
      }, {
        time: 180,
        speed: 86 / 60
      }, {
        time: 200,
        speed: 86 / 60
      }, {
        time: 200.2,
        speed: 0
      }, {
        time: 201,
        speed: 4 * 86 / 60
      }, {
        time: 245.52,
        speed: 6 * 86 / 60
      }, {
        time: INF,
        speed: 86 / 60
      }
    ];
    INTENDED_JUMPS = [
      {
        time: 0.010986328125,
        direction: -1
      }, {
        time: 5.614013671875,
        direction: -1
      }, {
        time: 8.2,
        direction: 1
      }, {
        time: 11.239013671875,
        direction: -1
      }, {
        time: 13.897705078125,
        direction: -1
      }, {
        time: 16.798095703125,
        direction: 1
      }, {
        time: 19.888623046875,
        direction: -1
      }, {
        time: 25.037841796875,
        direction: -1
      }, {
        time: 26.444091796875,
        direction: 1
      }, {
        time: 30.706787109375,
        direction: -1
      }, {
        time: 33.453369140625,
        direction: -1
      }, {
        time: 34.837646484375,
        direction: 1
      }, {
        time: 36.243896484375,
        direction: -1
      }, {
        time: 39.056396484375,
        direction: -1
      }, {
        time: 40.440673828125,
        direction: 1
      }, {
        time: 41.846923828125,
        direction: -1
      }, {
        time: 44.593505859375,
        direction: 1
      }, {
        time: 45.977783203125,
        direction: -1
      }, {
        time: 47.384033203125,
        direction: 1
      }, {
        time: 50.152587890625,
        direction: 1
      }, {
        time: 51.536865234375,
        direction: -1
      }, {
        time: 52.943115234375,
        direction: 1
      }, {
        time: 55.733642578125,
        direction: -1
      }, {
        time: 57.117919921875,
        direction: 1
      }, {
        time: 58.524169921875,
        direction: -1
      }, {
        time: 59.908447265625,
        direction: 1
      }, {
        time: 61.314697265625,
        direction: -1
      }, {
        time: 62.698974609375,
        direction: 1
      }, {
        time: 65.511474609375,
        direction: -1
      }, {
        time: 66.895751953125,
        direction: 1
      }, {
        time: 68.302001953125,
        direction: -1
      }, {
        time: 69.730224609375,
        direction: -1
      }, {
        time: 71.136474609375,
        direction: 1
      }, {
        time: 72.520751953125,
        direction: -1
      }, {
        time: 75.223388671875,
        direction: 1
      }, {
        time: 76.629638671875,
        direction: -1
      }, {
        time: 79.530029296875,
        direction: -1
      }, {
        time: 80.936279296875,
        direction: 1
      }, {
        time: 82.957763671875,
        direction: -1
      }, {
        time: 84.935302734375,
        direction: -1
      }, {
        time: 86.505361328125,
        direction: 1
      }, {
        time: 89.989013671875,
        direction: 1
      }, {
        time: 90.670166015625,
        direction: -1
      }, {
        time: 91.351318359375,
        direction: -1
      }, {
        time: 92.032470703125,
        direction: -1
      }, {
        time: 92.713623046875,
        direction: 1
      }, {
        time: 93.394775390625,
        direction: -1
      }, {
        time: 94.779052734375,
        direction: -1
      }, {
        time: 95.438232421875,
        direction: 1
      }, {
        time: 96.097412109375,
        direction: -1
      }, {
        time: 97.547607421875,
        direction: -1
      }, {
        time: 98.184814453125,
        direction: 1
      }, {
        time: 98.822021484375,
        direction: -1
      }, {
        time: 99.459228515625,
        direction: 1
      }, {
        time: 100.074462890625,
        direction: -1
      }, {
        time: 100.689697265625,
        direction: 1
      }, {
        time: 101.304931640625,
        direction: -1
      }, {
        time: 103.194580078125,
        direction: -1
      }, {
        time: 103.809814453125,
        direction: 1
      }, {
        time: 104.403076171875,
        direction: -1
      }, {
        time: 105.985107421875,
        direction: 1
      }, {
        time: 106.556396484375,
        direction: -1
      }, {
        time: 107.149658203125,
        direction: 1
      }, {
        time: 108.753662109375,
        direction: 1
      }, {
        time: 109.324951171875,
        direction: 1
      }, {
        time: 109.896240234375,
        direction: 1
      }, {
        time: 110.489501953125,
        direction: 1
      }, {
        time: 111.038818359375,
        direction: -1
      }, {
        time: 111.610107421875,
        direction: 1
      }, {
        time: 112.159423828125,
        direction: -1
      }, {
        time: 112.730712890625,
        direction: 1
      }, {
        time: 113.302001953125,
        direction: -1
      }, {
        time: 113.873291015625,
        direction: 1
      }, {
        time: 114.444580078125,
        direction: -1
      }, {
        time: 114.993896484375,
        direction: 1
      }, {
        time: 115.565185546875,
        direction: -1
      }, {
        time: 116.334228515625,
        direction: 1
      }, {
        time: 117.125244140625,
        direction: -1
      }, {
        time: 117.960205078125,
        direction: -1
      }, {
        time: 118.817138671875,
        direction: 1
      }, {
        time: 119.586181640625,
        direction: 1
      }, {
        time: 120.377197265625,
        direction: 1
      }, {
        time: 121.036376953125,
        direction: -1
      }, {
        time: 121.761474609375,
        direction: -1
      }, {
        time: 122.398681640625,
        direction: -1
      }, {
        time: 123.189697265625,
        direction: -1
      }, {
        time: 123.826904296875,
        direction: 1
      }, {
        time: 124.661865234375,
        direction: 1
      }, {
        time: 125.343017578125,
        direction: -1
      }, {
        time: 125.914306640625,
        direction: -1
      }, {
        time: 126.507568359375,
        direction: 1
      }, {
        time: 127.100830078125,
        direction: -1
      }, {
        time: 128.243408203125,
        direction: 1
      }, {
        time: 128.968505859375,
        direction: 1
      }, {
        time: 129.759521484375,
        direction: -1
      }, {
        time: 130.352783203125,
        direction: -1
      }, {
        time: 131.143798828125,
        direction: 1
      }, {
        time: 131.759033203125,
        direction: 1
      }, {
        time: 132.462158203125,
        direction: -1
      }, {
        time: 133.209228515625,
        direction: -1
      }, {
        time: 133.868408203125,
        direction: 1
      }, {
        time: 134.461669921875,
        direction: -1
      }, {
        time: 135.274658203125,
        direction: 1
      }, {
        time: 135.911865234375,
        direction: -1
      }, {
        time: 136.724853515625,
        direction: 1
      }, {
        time: 137.318115234375,
        direction: 1
      }, {
        time: 137.933349609375,
        direction: -1
      }, {
        time: 138.548583984375,
        direction: 1
      }, {
        time: 139.317626953125,
        direction: -1
      }, {
        time: 140.108642578125,
        direction: -1
      }, {
        time: 140.877685546875,
        direction: 1
      }, {
        time: 141.492919921875,
        direction: -1
      }, {
        time: 142.305908203125,
        direction: 1
      }, {
        time: 142.921142578125,
        direction: 1
      }, {
        time: 143.602294921875,
        direction: -1
      }, {
        time: 144.305419921875,
        direction: -1
      }, {
        time: 144.920654296875,
        direction: 1
      }, {
        time: 145.667724609375,
        direction: -1
      }, {
        time: 146.480712890625,
        direction: 1
      }, {
        time: 147.117919921875,
        direction: -1
      }, {
        time: 147.799072265625,
        direction: -1
      }, {
        time: 148.568115234375,
        direction: 1
      }, {
        time: 149.249267578125,
        direction: -1
      }, {
        time: 149.952392578125,
        direction: 1
      }, {
        time: 150.567626953125,
        direction: 1
      }, {
        time: 151.270751953125,
        direction: -1
      }, {
        time: 151.995849609375,
        direction: 1
      }, {
        time: 152.633056640625,
        direction: -1
      }, {
        time: 153.424072265625,
        direction: -1
      }, {
        time: 154.105224609375,
        direction: -1
      }, {
        time: 154.808349609375,
        direction: -1
      }, {
        time: 155.511474609375,
        direction: -1
      }, {
        time: 156.148681640625,
        direction: 1
      }, {
        time: 157.203369140625,
        direction: -1
      }, {
        time: 157.840576171875,
        direction: 1
      }, {
        time: 158.499755859375,
        direction: -1
      }, {
        time: 159.158935546875,
        direction: 1
      }, {
        time: 160.323486328125,
        direction: -1
      }, {
        time: 161.026611328125,
        direction: -1
      }, {
        time: 161.729736328125,
        direction: 1
      }, {
        time: 162.806396484375,
        direction: -1
      }, {
        time: 163.509521484375,
        direction: -1
      }, {
        time: 164.520263671875,
        direction: -1
      }, {
        time: 165.882568359375,
        direction: -1
      }, {
        time: 167.530517578125,
        direction: -1
      }, {
        time: 168.189697265625,
        direction: 1
      }, {
        time: 168.870849609375,
        direction: -1
      }, {
        time: 170.057373046875,
        direction: -1
      }, {
        time: 170.738525390625,
        direction: 1
      }, {
        time: 171.419677734375,
        direction: -1
      }, {
        time: 172.100830078125,
        direction: 1
      }, {
        time: 172.781982421875,
        direction: -1
      }, {
        time: 173.463134765625,
        direction: 1
      }, {
        time: 175.748291015625,
        direction: -1
      }, {
        time: 177.066650390625,
        direction: -1
      }, {
        time: 177.857666015625,
        direction: 1
      }, {
        time: 178.934326171875,
        direction: -1
      }, {
        time: 181.197509765625,
        direction: 1
      }, {
        time: 183.988037109375,
        direction: -1
      }, {
        time: 186.778564453125,
        direction: 1
      }, {
        time: 189.569091796875,
        direction: -1
      }
    ];
    DIFFICULTY = [
      {
        time: 0,
        difficulty: 0.0
      }, {
        time: 22.393491744995117,
        difficulty: 0.4
      }, {
        time: 44.50532150268555,
        difficulty: 0.6
      }, {
        time: 55.84508514404297,
        difficulty: 0.5
      }, {
        time: 69.04436492919922,
        difficulty: 0.4
      }, {
        time: 80.5565414428711,
        difficulty: 0.5
      }, {
        time: 92.5555648803711,
        difficulty: 0.6
      }, {
        time: 100.36393737792969,
        difficulty: 0.7
      }, {
        time: 136.5236358642578,
        difficulty: 0.8
      }, {
        time: INF,
        0: 0
      }
    ];
    score = 0;
    personalBest = 0;
    doPersonalBest = function() {
      personalBest = Math.max(personalBest, score);
      return $("#personalBest").text(personalBest);
    };
    refreshScore = function() {
      return $("#score").text(score);
    };
    resetScore = function() {
      score = 0;
      return refreshScore();
    };
    incrementScore = function() {
      score++;
      return refreshScore();
    };
    playing = false;
    togglePlaying = function() {
      if (playing) {
        $('audio')[0].pause();
        return playing = false;
      } else {
        $('audio')[0].play();
        return playing = true;
      }
    };
    registerKeyDown(ESC, togglePlaying);
    registerKeyDown(UP, function() {
      if (!playing) {
        return togglePlaying();
      }
    });
    registerKeyDown(DOWN, function() {
      if (!playing) {
        return togglePlaying();
      }
    });
    getElapsedDistance = function(a, b) {
      var elapsedTime, s0, s1, t0, t1, _ref, _ref1;

      _ref = [a.time, a.speed], t0 = _ref[0], s0 = _ref[1];
      _ref1 = [b.time, b.speed], t1 = _ref1[0], s1 = _ref1[1];
      elapsedTime = t1 - t0;
      return (s0 + s1) * elapsedTime / 2;
    };
    mapTimeToX = function(time) {
      var distance, i, myDeltaSpeed, myDeltaTime, mySpeed, totalDeltaSpeed, totalDeltaTime;

      distance = 0;
      i = 0;
      while (SPEEDS[i + 1].time < time) {
        distance += getElapsedDistance(SPEEDS[i], SPEEDS[i + 1]);
        i++;
      }
      totalDeltaTime = SPEEDS[i + 1].time - SPEEDS[i].time;
      totalDeltaSpeed = SPEEDS[i + 1].speed - SPEEDS[i].speed;
      myDeltaTime = time - SPEEDS[i].time;
      myDeltaSpeed = totalDeltaSpeed * myDeltaTime / totalDeltaTime;
      mySpeed = SPEEDS[i].speed + myDeltaSpeed;
      return distance += getElapsedDistance(SPEEDS[i], {
        time: time,
        speed: mySpeed
      });
    };
    mapXToTime = function(x) {
      var lower, middle, upper;

      lower = 0;
      upper = 6 * 60;
      while (upper - lower > 1 / 60) {
        middle = (lower + upper) / 2;
        if (mapTimeToX(middle) <= x) {
          lower = middle;
        } else {
          upper = middle;
        }
      }
      return middle;
    };
    getTime = function() {
      return $('audio')[0].currentTime;
    };
    getPlayerX = function() {
      return mapTimeToX(getTime());
    };
    sineStart = -10;
    nextSineStart = INF;
    nextSineDirection = -1;
    sineDirection = -1;
    getJumpY = function(startX, atX, direction) {
      var x;

      x = atX - startX;
      if (x >= JUMP_DISTANCE) {
        return 0;
      } else {
        return Math.sin(x / JUMP_DISTANCE * Math.PI) * 1.75 * direction;
      }
    };
    getPlayerY = function() {
      var x;

      x = getPlayerX();
      if (x > nextSineStart) {
        sineStart = nextSineStart;
        sineDirection = nextSineDirection;
        nextSineStart = INF;
      }
      return getJumpY(sineStart, x, sineDirection);
    };
    isJumping = function() {
      return sineStart + JUMP_DISTANCE > getPlayerX();
    };
    doJump = function(direction) {
      nextSineDirection = direction;
      nextSineStart = isJumping() ? sineStart + JUMP_DISTANCE : getPlayerX();
      return console.log({
        time: mapXToTime(nextSineStart),
        direction: nextSineDirection
      });
    };
    registerKeyDown(UP, function() {
      return doJump(-1);
    });
    registerKeyDown(DOWN, function() {
      return doJump(+1);
    });
    _fn = function(i) {
      return registerKeyDown(("" + i).charCodeAt(0), function() {
        return console.log({
          time: getTime(),
          difficulty: i
        });
      });
    };
    for (i = _i = 0; _i <= 9; i = ++_i) {
      _fn(i);
    }
    registerKeyDown(SPACE, function() {
      return console.log($('audio')[0].currentTime);
    });
    setViewport(-3, -2, VIEWPORT_WIDTH, VIEWPORT_HEIGHT);
    drawPlayer = function() {
      return drawCircle(getPlayerX(), getPlayerY(), PLAYER_RADIUS, 'rgba(0,0,0,0.9)');
    };
    getViewportX = function() {
      return getPlayerX() - PLAYER_X_IN_VIEWPORT;
    };
    drawXAxis = function() {
      var viewportX, _results;

      viewportX = getViewportX();
      drawLine(viewportX, 0, viewportX + VIEWPORT_WIDTH, 0, 'red');
      i = Math.ceil(viewportX);
      _results = [];
      while (i < viewportX + VIEWPORT_WIDTH) {
        drawLine(i, -TICK_HEIGHT, i, +TICK_HEIGHT);
        _results.push(i++);
      }
      return _results;
    };
    /* Difficulty
    */

    getDifficultyAt = function(time) {
      var lower, middle, upper;

      lower = 0;
      upper = DIFFICULTY.length;
      while (lower + 1 !== upper) {
        middle = Math.floor((lower + upper) / 2);
        if (DIFFICULTY[middle].time <= time) {
          lower = middle;
        } else {
          upper = middle;
        }
      }
      return DIFFICULTY[lower].difficulty;
    };
    stuffIndex = 0;
    stuff = [];
    goodStuffCollision = function(thing) {
      if (thing.color === 'blue' && playing) {
        incrementScore();
        return thing.color = 'green';
      }
    };
    fadeOutVolume = function(volume) {
      var myFader;

      if (volume >= 0) {
        $('audio')[0].volume = volume;
        myFader = function() {
          return fadeOutVolume(volume - 0.01);
        };
        return setTimeout(myFader, 10);
      } else {
        return fadeInVolume(0);
      }
    };
    badStuffCollision = function(thing) {
      doPersonalBest();
      return $("#game").fadeOut('slow', function() {
        var _j, _len;

        resetScore();
        stuffIndex = 0;
        nextSineStart = INF;
        sineStart = -10;
        for (_j = 0, _len = stuff.length; _j < _len; _j++) {
          thing = stuff[_j];
          if (thing.color === 'green') {
            thing.color = 'blue';
          }
        }
        $('audio')[0].currentTime = 0;
        return $("#game").fadeIn('slow');
      });
    };
    pr = function(x) {
      return Math.random() < x;
    };
    for (_j = 0, _len = INTENDED_JUMPS.length; _j < _len; _j++) {
      jump = INTENDED_JUMPS[_j];
      i = start = mapTimeToX(jump.time);
      while (i < start + JUMP_DISTANCE * 1.1) {
        difficulty = getDifficultyAt(mapXToTime(i));
        if (i !== start && i < start + JUMP_DISTANCE * .9) {
          if (pr(difficulty * 0.5)) {
            stuff.push({
              x: i,
              y: getJumpY(start, i, -jump.direction),
              color: 'red',
              collision: badStuffCollision
            });
          } else if (pr(difficulty * 0.5)) {
            stuff.push({
              x: i,
              y: 0,
              color: 'red',
              collision: badStuffCollision
            });
          }
        }
        if (pr(Math.max(1 - difficulty, 0.5))) {
          stuff.push({
            x: i,
            y: getJumpY(start, i, jump.direction),
            color: 'blue',
            collision: goodStuffCollision
          });
        }
        i += JUMP_DISTANCE / 7;
      }
    }
    t = INTENDED_JUMPS[INTENDED_JUMPS.length - 1].time + 2;
    while (t < 6 * 60) {
      difficulty = getDifficultyAt(t);
      if (pr(difficulty)) {
        if (pr(difficulty * 0.1)) {
          stuff.push({
            x: mapTimeToX(t),
            y: Math.random() * 4 - 2,
            color: 'red',
            collision: badStuffCollision
          });
        } else {
          stuff.push({
            x: mapTimeToX(t),
            y: Math.random() * 4 - 2,
            color: 'blue',
            collision: goodStuffCollision
          });
        }
      }
      t += 60 / 80 / 8;
    }
    stuff.push({
      x: INF,
      y: 0,
      color: 'yellow'
    });
    square = function(x) {
      return x * x;
    };
    drawStuff = function() {
      var noMorePush, playerX, playerY, thing, thingsToCallback, viewportX, _k, _len1, _results;

      viewportX = getViewportX();
      while (stuff[stuffIndex].x < viewportX - 1) {
        stuffIndex++;
      }
      i = stuffIndex;
      thingsToCallback = [];
      playerX = getPlayerX();
      playerY = getPlayerY();
      noMorePush = false;
      while (stuff[i].x < viewportX + VIEWPORT_WIDTH + 1) {
        drawRect(stuff[i].x - STUFF_WIDTH / 2, stuff[i].y - STUFF_WIDTH / 2, STUFF_WIDTH, STUFF_WIDTH, stuff[i].color);
        if (square(stuff[i].x - playerX) + square(stuff[i].y - playerY) < square(DIST_FOR_COLLISION)) {
          if (!noMorePush) {
            thingsToCallback.push(stuff[i]);
          }
          if (stuff[i].color === 'red') {
            noMorePush = true;
          }
        }
        i++;
      }
      _results = [];
      for (_k = 0, _len1 = thingsToCallback.length; _k < _len1; _k++) {
        thing = thingsToCallback[_k];
        _results.push(thing.collision(thing));
      }
      return _results;
    };
    return startGame(function() {
      setViewport(getViewportX(), -2);
      drawXAxis();
      drawStuff();
      return drawPlayer();
    });
  });

}).call(this);
